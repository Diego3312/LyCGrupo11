package lyc.compiler;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import lyc.compiler.simbolsTable.SimbolTable;
import lyc.compiler.simbolsTable.SimbolRow;
import lyc.compiler.simbolsTable.DataType;
import lyc.compiler.validations.Validate;

class Parser;

action code
{:
    
    public SimbolTable simbolTable = SimbolTable.getSingletonInstance();
    public ArrayList<String> identifiersList = new ArrayList();
    public ArrayList<String> listAux = new ArrayList<String>();
    public ArrayList<String> listStrings;
    public ArrayList<String> listInt;
    public ArrayList<String> listFloat;
    public ArrayList<String> listBoolean;
    public ArrayList<String> listDateConverted;
    public DataType type;
:}

// Terminals
terminal WHILE;
terminal WRITE;
terminal IF;
terminal ELSE;
terminal INIT;
terminal READ;
terminal CONVDATE;
terminal EQUALEXP;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;
terminal CHARACTER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal OPEN_SQUARE_BRACKET;
terminal CLOSE_SQUARE_BRACKET;
terminal DOT;
terminal DOS_PUNTOS;
terminal COMA;
terminal SEMI_COLON;
terminal LESS_THAN;
terminal GREATER_THAN;
terminal EQUAL;
terminal NOT_EQUAL;
terminal LESS_THAN_EQUAL;
terminal GREATER_THAN_EQUAL;
terminal AND;
terminal OR;
terminal NOT;
terminal QUOT;
terminal SINGLE_QUOT;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal BOOLEAN;
terminal DATECONVERTED;

// Non Terminals
//non terminal code;
non terminal program;
non terminal block;
non terminal sentence;
non terminal assignment;
non terminal selection;
non terminal iteration;
non terminal escribir;
non terminal leer;
non terminal expression;
non terminal term;
non terminal factor;
non terminal condition;
non terminal comparation;
non terminal comparator;
non terminal initialization;
non terminal declaration_block;
non terminal declaration_var;
non terminal list_identifiers;
non terminal type;
non terminal object;
non terminal listar;
non terminal listado;
non terminal equal_expression;
non terminal lista_expresiones;

// Start Symbol Definition

start with program;
program ::= block {: System.out.println("End"); :};

block ::= sentence {: System.out.println("Block"); :};
block ::= block sentence {: System.out.println("Blocks"); :};

sentence ::= assignment {: System.out.println("Sentence asignacion"); :};
sentence ::= selection {: System.out.println("Sentence seleccion"); :};
sentence ::= iteration {: System.out.println("Sentence while"); :};
sentence ::= escribir {: System.out.println("Sentence write"); :};
sentence ::= leer {: System.out.println("Sentence read"); :};
sentence ::= initialization {: System.out.println("Sentence inicializacion"); :};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("if solo "); :};
selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("If "); :} ELSE OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("Else"); :};

condition ::= comparation {: System.out.println("Condition "); :};
condition ::= condition AND comparation {: System.out.println("Condition AND "); :};
condition ::= condition OR comparation {: System.out.println("Condition OR "); :};
condition ::= NOT comparation {: System.out.println("Condition NOT "); :};


comparation ::= expression comparator expression {: System.out.println("Comparation"); :};

comparator ::= LESS_THAN {: System.out.println("<"); :};
comparator ::= GREATER_THAN {: System.out.println(">"); :};
comparator ::= EQUAL {: System.out.println("=="); :};
comparator ::= NOT_EQUAL {: System.out.println("!="); :};
comparator ::= LESS_THAN_EQUAL {: System.out.println("<="); :};
comparator ::= GREATER_THAN_EQUAL {: System.out.println(">="); :};

assignment ::= IDENTIFIER:id {: System.out.println("Id: " + id + " Tipo de dato: " + simbolTable.getDataType(id.toString()));
                                if ( !( (listStrings != null && listStrings.contains(id)) ||
                                        (listInt != null && listInt.contains(id)) ||
                                        (listFloat != null && listFloat.contains(id)) ||
                                        (listBoolean != null && listBoolean.contains(id)) ||
                                        (listDateConverted != null && listDateConverted.contains(id)) )){
                                    System.out.println("ERROR: La variable no fue declarada");
                                    System.exit(-1);
                                }
                                System.out.println("= " + type);
                             :}
               ASSIG object {:  System.out.println("Assignment");
                                Validate.validateTypes(simbolTable.getDataType(id.toString()), type.toString());
                            :};

object ::= expression {:type = DataType.INT; :};
object ::= STRING_CONSTANT:stringConstant {: System.out.println("String_constant: " + stringConstant); 
                                  final String str = stringConstant.toString().replace("\"", ""); 
                                  simbolTable.add("_" + str, DataType.CTE_STRING, str.toString(), str.length()); 
                                  type = DataType.STRING;
                                  :};
object ::= EQUALEXP OPEN_BRACKET lista_expresiones CLOSE_BRACKET {:type = DataType.BOOLEAN; :};
object ::= CONVDATE:date {: System.out.println("convDate: " + date);
                            type = DataType.DATECONVERTED; 
                         :};
lista_expresiones ::= lista_expresiones COMA expression;
lista_expresiones ::= expression;

iteration ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {: System.out.println("While"); :};

escribir ::= WRITE OPEN_BRACKET STRING_CONSTANT:str CLOSE_BRACKET{: System.out.println("Write " + str); :};
escribir ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET{: System.out.println("Write " + id); :};

leer ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET{: System.out.println("Read " + id); :};


initialization ::= INIT OPEN_CURLY_BRACKET declaration_block CLOSE_CURLY_BRACKET {: System.out.println("Initialization"); :};
declaration_block ::= declaration_var {: System.out.println("Declaration"); :};
declaration_block ::= declaration_block declaration_var {: System.out.println("Declaration"); :};
declaration_var ::= list_identifiers DOS_PUNTOS type {: System.out.println("Declaration con coma"); :};

list_identifiers ::= IDENTIFIER:id {: System.out.println("Id: " + id); 
                                      if (this.identifiersList.contains(id.toString())){
                                        System.out.println("ERROR: La variable ya fue declarada");
                                        System.exit(-1);
                                      }
                                      this.identifiersList.add(id.toString());
                                      listAux.add(id.toString()); :};
list_identifiers ::= list_identifiers COMA IDENTIFIER:id {: System.out.println("lista Ids: " + id); 
                                                            if (this.identifiersList.contains(id.toString())){
                                                                System.out.println("ERROR: La variable ya fue declarada");
                                                                System.exit(-1);
                                                            }
                                                            this.identifiersList.add(id.toString());
                                                            listAux.add(id.toString()); :};

type ::= INT {: System.out.println("Integer");
                simbolTable.addIdentifiers(this.identifiersList, DataType.INT);
                if (listInt == null )
                    listInt = new ArrayList<String>(listAux);
                listAux.clear(); :};
type ::= FLOAT {: System.out.println("Float"); 
                  simbolTable.addIdentifiers(this.identifiersList, DataType.FLOAT);
                  if (listFloat == null )
                    listFloat = new ArrayList<String>(listAux);
                  listAux.clear(); :};
type ::= STRING {: System.out.println("String"); 
                   simbolTable.addIdentifiers(this.identifiersList, DataType.STRING);
                   if (listStrings == null )
                    listStrings = new ArrayList<String>(listAux);
                   listAux.clear(); :};
type ::= BOOLEAN {: System.out.println("Boolean"); 
                    simbolTable.addIdentifiers(this.identifiersList, DataType.BOOLEAN);
                    if (listBoolean == null )
                        listBoolean = new ArrayList<String>(listAux);
                    listAux.clear(); :};
type ::= DATECONVERTED {: System.out.println("DateConverted");  
                          simbolTable.addIdentifiers(this.identifiersList, DataType.DATECONVERTED);
                          if (listDateConverted == null )
                            listDateConverted = new ArrayList<String>(listAux);
                          listAux.clear(); :};

expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};

term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};

factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); 
                             if ( (listStrings != null && listStrings.contains(id)) || (listBoolean != null && listBoolean.contains(id)) || (listDateConverted != null && listDateConverted.contains(id))){
                                    System.out.println("ERROR: Debe ser tipo de dato Int o Float");
                                    System.exit(-1);
                             }
                             if ( !(    (listInt != null && listInt.contains(id)) ||
                                        (listFloat != null && listFloat.contains(id))  )){
                                    System.out.println("ERROR: La variable no fue declarada");
                                    System.exit(-1);
                                }
                          :};
factor ::= INTEGER_CONSTANT:intConstant {: System.out.println("Int Constant: " + intConstant ); 
                                           simbolTable.add("_" + intConstant, DataType.CTE_INT, intConstant.toString(), null); 
                                           :};
factor ::= FLOAT_CONSTANT:floatConstant {: System.out.println("Float Constant: " + floatConstant ); 
                                           simbolTable.add("_" + floatConstant, DataType.CTE_FLOAT, floatConstant.toString(), null);
                                           :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};


